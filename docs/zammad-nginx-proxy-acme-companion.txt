## **Configurando o Zammad com nginx-proxy e acme-companion no `docker-compose.prod.yml`**
O objetivo √© rodar o Zammad atr√°s de um nginx-proxy com suporte a SSL autom√°tico via Let's Encrypt usando o acme-companion. Isso permitir√° que o Zammad seja acessado por um dom√≠nio seguro (https://zammad.meusite.com.br).

Abaixo est√° a vers√£o consolidada do `docker-compose.prod.yml`, que inclui:
- **nginx-proxy** como reverse proxy.
- **acme-companion** para SSL autom√°tico.
- **Zammad** e seus servi√ßos (PostgreSQL, Redis e Elasticsearch).

### **1. Configura√ß√£o do  `docker-compose.prod.yml`**
No arquivo docker-compose.prod.yml, a √∫nica modifica√ß√£o necess√°ria nos servi√ßos do Zammad √© adicionar as vari√°veis de ambiente apenas no zammad-nginx, para que ele seja reconhecido pelo proxy reverso.

O nginx-proxy funciona como um roteador de tr√°fego para servi√ßos que precisam ser expostos via HTTP/HTTPS. No caso do Zammad:
- O servi√ßo zammad-nginx serve a interface web do Zammad.
- O nginx-proxy precisa interceptar as requisi√ß√µes HTTP/S para zammad-nginx e encaminh√°-las corretamente.
- Os servi√ßos internos (zammad-postgresql, zammad-elasticsearch, zammad-redis, etc.) n√£o devem ser expostos publicamente.

```yaml
version: '3.8'

services:
  # Servi√ßo do nginx-proxy (Reverse Proxy Autom√°tico)
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - proxy-network
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx-certs:/etc/nginx/certs
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html

  # Servi√ßo do acme-companion (Gerenciamento Autom√°tico de Certificados SSL)
  acme-companion:
    image: nginxproxy/acme-companion
    container_name: acme-companion
    restart: unless-stopped
    depends_on:
      - nginx-proxy
    environment:
      - DEFAULT_EMAIL=seuemail@meusite.com.br
    networks:
      - proxy-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx-certs:/etc/nginx/certs
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - acme:/etc/acme.sh

  # Atualiza o servi√ßo zammad-nginx para rodar atr√°s do proxy
  zammad-nginx:
    environment:
      - VIRTUAL_HOST=support.meusite.com.br
      - LETSENCRYPT_HOST=support.meusite.com.br
    networks:
      - proxy-network

networks:
  proxy-network:
    external: true

volumes:
  nginx-certs:
  nginx-vhost:
  nginx-html:
  acme:

```

**Nota**:
N√£o √© necess√°rio modificar todos os servi√ßos, pois apenas o zammad-nginx precisa estar vis√≠vel para o proxy reverso. Os demais servi√ßos, como banco de dados (PostgreSQL), Elasticsearch, Redis e Memcached, s√£o usados internamente pelo Zammad e n√£o precisam de acesso direto pelo proxy.

#### Por que n√£o modificar zammad-postgresql, zammad-elasticsearch e outros?
- O PostgreSQL (zammad-postgresql), Redis (zammad-redis) e Elasticsearch (zammad-elasticsearch) s√£o servi√ßos internos usados pelo Zammad e n√£o precisam de comunica√ß√£o externa.
- Deixar esses servi√ßos sem acesso direto pelo proxy aumenta a seguran√ßa, evitando exposi√ß√£o desnecess√°ria.

Exemplo de problema ao expor servi√ßos internos:
Se zammad-postgresql estiver acess√≠vel publicamente, algu√©m pode tentar invadir o banco de dados.

#### Conclus√£o
‚úÖ Apenas zammad-nginx precisa ser atualizado para rodar atr√°s do proxy.
‚úÖ Os servi√ßos internos continuam isolados, garantindo seguran√ßa e desempenho.
‚úÖ Separa√ß√£o correta das responsabilidades, deixando o proxy cuidar apenas do tr√°fego HTTP/HTTPS.
---

### **2. Criar a Rede Docker Compartilhada**
Antes de subir os servi√ßos, crie a rede compartilhada proxy-network:

```bash
docker network create proxy-network
```

### **3. Subir os Containers**
Agora, basta rodar o comando abaixo para iniciar o Zammad e os servi√ßos necess√°rios:

```bash
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

üìå **Explica√ß√£o do comando:**
- O `docker-compose.yml` cont√©m as configura√ß√µes padr√£o do Zammad.
- O `docker-compose.prod.yml` adiciona a configura√ß√£o do **reverse proxy** e do **SSL autom√°tico**.
- O uso de `-f` permite rodar ambos os arquivos ao mesmo tempo.

---

### **4. Testar o Acesso**
- Acesse **https://support.meusite.com.br** no navegador.
- O **acme-companion** cuidar√° automaticamente da gera√ß√£o do certificado SSL.

---

## **Benef√≠cios Dessa Abordagem**
‚úÖ **Organiza√ß√£o**: Mant√©m a configura√ß√£o do Zammad e do proxy em um √∫nico arquivo (`docker-compose.prod.yml`).
‚úÖ Adiciona apenas o proxy reverso e a configura√ß√£o SSL no docker-compose.prod.yml.
‚úÖ **HTTPS Autom√°tico**: O **acme-companion** gera e renova os certificados automaticamente.
‚úÖ **Escalabilidade**: Pode adicionar outros servi√ßos e dom√≠nios facilmente ao nginx-proxy.
‚úÖ **Facilidade de Deploy**: Atualiza√ß√µes do Zammad podem ser feitas sem afetar a configura√ß√£o do proxy.


---

## Explica√ß√£o das Vari√°veis VIRTUAL_HOST e LETSENCRYPT_HOST

Os valores das vari√°veis **`VIRTUAL_HOST`** e **`LETSENCRYPT_HOST`** devem corresponder ao **dom√≠nio ou subdom√≠nio** que ser√° usado para acessar o Zammad via navegador.

- **`VIRTUAL_HOST`**:
  ‚Üí Define o dom√≠nio/subdom√≠nio que ser√° roteado pelo **nginx-proxy**.
  ‚Üí O **nginx-proxy** reconhecer√° automaticamente esse nome e direcionar√° o tr√°fego para o container **`zammad-nginx`**.

- **`LETSENCRYPT_HOST`**:
  ‚Üí Define o **dom√≠nio/subdom√≠nio** para o qual ser√° gerado um **certificado SSL autom√°tico** pelo **acme-companion** (Let's Encrypt).
  ‚Üí Se esta vari√°vel estiver configurada, um **certificado SSL ser√° gerado automaticamente** para proteger a conex√£o HTTPS.

---

### **Exemplo de Configura√ß√£o**
Se o Zammad estiver sendo configurado para ser acessado via **`support.meusite.com.br`**, ent√£o:

```yaml
  zammad-nginx:
    environment:
      - VIRTUAL_HOST=support.meusite.com.br
      - LETSENCRYPT_HOST=support.meusite.com.br
    networks:
      - proxy-network
```

---

### **Como Escolher o Valor Correto?**
1. **Se possuir um dom√≠nio pr√≥prio**, use algo como:
   ```yaml
   VIRTUAL_HOST=support.empresa.com
   LETSENCRYPT_HOST=support.empresa.com
   ```
   üìå **O dom√≠nio deve estar configurado no DNS para apontar para o servidor onde o Docker est√° rodando**.

2. **Se estiver testando localmente (sem dom√≠nio p√∫blico)**, pode usar algo como:
   ```yaml
   VIRTUAL_HOST=meusite.local
   LETSENCRYPT_HOST=meusite.local
   ```
   ‚ö†Ô∏è **Mas o Let's Encrypt n√£o funciona para dom√≠nios locais (ex.: `localhost`, `.local`)**.

3. **Se for um ambiente interno (intranet)**, pode usar um dom√≠nio da sua rede:
   ```yaml
   VIRTUAL_HOST=support.intranet.local
   LETSENCRYPT_HOST=support.intranet.local
   ```
   üö® **√â necess√°rio um servi√ßo DNS interno para resolver o dom√≠nio `*.intranet.local`**.

---

### **Testando o Setup**
Ap√≥s configurar corretamente, execute:

```bash
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

E tente acessar:

```
https://support.meusite.com.br
```

Se houver algum erro no SSL, verifique os logs do **acme-companion** para conferir a emiss√£o do certificado:

```bash
docker logs acme-companion
```

Se precisar de mais ajustes, posso ajudar! üöÄ

